{"version":3,"sources":["components/About.js","components/Header.js","containers/Sidebar.js","components/ProjectForm.js","components/Project.js","containers/ProjectContainer.js","components/Login.js","components/Signup.js","components/Card.js","containers/ListCardContainer.js","containers/ListCards.js","containers/ListContainer.js","App.js","index.js"],"names":["About","className","Header","handleClick","props","logOutUser","handleProjectReset","resetCurrentProject","this","login","to","onClick","style","color","Component","Sidebar","ProjectForm","state","name","handleChange","event","target","value","setState","handleSubmit","preventDefault","closeProjectForm","createNewProject","onSubmit","projectFormStyles","type","placeholder","onChange","projectFormInputStyles","text","projectFormSubmitStyles","height","width","display","flexDirection","alignItems","justifyContent","Project","projectCreationMode","renderProjectForm","evt","projectId","loadCurrentProject","renderProjects","projects","map","project","id","ProjectContainer","projectList","user_id","currentUser","fetch","method","headers","localStorage","token","body","JSON","stringify","then","res","json","projectData","data","attributes","newProjectObj","currentProject","Login","username","password","e","logInUser","Signup","email","registerUser","Card","hover","handleMouseOver","handleMouseOut","console","log","taskId","deleteCard","onMouseEnter","onMouseLeave","task","ListCardContainer","taskCards","listCards","tasks","clicked","inputValue","taskID","newTaskCardsArr","filter","taskObj","Accept","Authorization","list_id","content","resp","respData","newTaskCardObj","key","ListCards","cards","renderListCards","card","Fragment","ListContainer","lists","project_id","document","URL","split","newListCardObj","App","currentProjectLoaded","projectsLoaded","checkForToken","getUserFromToken","checkForProjectId","includes","logInUserByToken","methodL","userInfo","fetchprojectList","clear","errors","alert","reduce","message","string","setItem","fetchData","error","exact","path","component","render","renderProps","foundProjectArr","currentProjectID","length","currentProjectId","routerProps","userLoggedIn","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.54a7cf7f.chunk.js","sourcesContent":["import React from 'react'\n\n\nfunction About() {\n  return (\n    <div className=\"about-container\">\n      <h2>About</h2>\n      <h3>Created By: Jonathan Schack</h3>\n      <h3>Languages</h3>\n      <h4>HTML</h4>\n      <h4>CSS</h4>\n      <h4>React</h4>\n      <h4>Ruby on Rails</h4>\n    </div>\n  )\n}\n\nexport default About;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Header extends Component {\n\n\n\n  handleClick = () => {\n    this.props.logOutUser()\n  }\n\n  handleProjectReset = () => {\n    this.props.resetCurrentProject()\n  }\n\n  render() {\n    return (\n      <nav className=\"header\">\n        <div className=\"header-container\">\n          <h1>Noted</h1>\n          { this.props.login ?\n          <ul>\n            <li><Link to=\"/\" className='cool-link' onClick={this.handleProjectReset} style={{color: 'rgb(216, 216, 216)'}}>Home</Link></li>\n            <li><Link to=\"/about\" className='cool-link' onClick={this.handleProjectReset} style={{color: 'rgb(216, 216, 216)'}}>About</Link></li>\n            <li><Link to='/login' className='cool-link' style={{color: 'rgb(216, 216, 216)'}} onClick={this.handleClick }>Log Out</Link></li>\n          </ul>\n          :\n          null\n          }\n        </div>\n      </nav>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react'\n\nclass Sidebar extends Component {\n  render() {\n    return (\n      <div className=\"sidebar-container\">\n        <div className='teams-wrapper'>\n          <h2>Teams</h2>\n          \n        </div>\n        <div className='friends-wrapper'>\n          <h2>Friends</h2>\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sidebar","import React, { Component } from 'react';\n\nexport default class ProjectForm extends Component {\n  state = {\n    name: ''\n  };\n\n  handleChange = event => {\n    let {name, value} = event.target\n    this.setState({\n      name: value\n    })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    // Close the form\n    this.props.closeProjectForm()\n    // Create new project with the name of the project and the id of the user from the token.\n    this.props.createNewProject(this.state.name)\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className=\"create-project__form\" style={projectFormStyles}>\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Name\"\n          onChange={this.handleChange}\n          style={projectFormInputStyles}\n        />\n        <input type=\"submit\" text=\"Save Project!\" style={projectFormSubmitStyles}/>\n      </form>\n    );\n  }\n}\n\nconst projectFormInputStyles = {\n  height: '2rem'\n}\n\nconst projectFormSubmitStyles = {\n  width: '4rem'\n}\n\nconst projectFormStyles = {\n  width: 'inherit',\n  height: 'inherit',\n  display: 'flex', \n  flexDirection: 'column',\n  alignItems: 'center',\n  justifyContent: 'space-around'\n}","import React, { Component } from 'react'\nimport ProjectForm from \"../components/ProjectForm\";\nimport { Link } from 'react-router-dom';\n\nexport class Project extends Component {\n\n  state = {\n    projectCreationMode: false\n  }\n\n  // Render project form\n  renderProjectForm = () => {\n    // Turn on Production Creation Mode\n    this.setState({\n      projectCreationMode: true\n    })\n    // debugger;\n    // Show the form to add a\n  }\n\n  closeProjectForm = () => {\n    this.setState({\n      projectCreationMode: false\n    })\n  }\n\n  handleClick = (evt, projectId) => {\n    // Method that gets the project information\n    this.props.loadCurrentProject(projectId)\n  }\n\n  render() {\n    const renderProjects = this.props.projects.map(project => {\n      return <Link to={`/projects/${project.id}`}><div onClick={evt => this.handleClick(evt, project.id)} className=\"project\"><h3>{project.name}</h3></div></Link>\n    })\n    return (\n      <div className='single-project-container'>\n        {renderProjects}\n        {\n          this.state.projectCreationMode\n            ? \n          <div className='project create-project'>\n            <ProjectForm closeProjectForm={this.closeProjectForm} createNewProject={this.props.createNewProject} />  \n          </div>   \n            :\n          <div onClick={this.renderProjectForm} className='project create-project'>\n            <h3>Create Project</h3>\n          </div>\n        }\n            \n      </div>\n      \n    )\n  }\n}\n\nexport default Project","import React, { Component } from 'react';\nimport Project from '../components/Project';\n\nclass ProjectContainer extends Component {\n  state = {\n    projectList: this.props.projectList\n  };\n\n  // takes the project id and a name for the project.\n  createNewProject = name => {\n    // Get the current user's ID\n    const user_id = this.props.currentUser.user_id;\n    // Make the post request\n    fetch('https://chello-api.herokuapp.com/projects', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Authorization': localStorage.token\n      },\n      body: JSON.stringify({ user_id, name })\n    })\n      .then(res => res.json())\n      .then(projectData => {\n        let { id, attributes } = projectData.data\n        let newProjectObj = { id, ...attributes }\n          this.setState({\n            projectList: [newProjectObj, ...this.state.projectList]\n          });\n      });\n  };\n\n  render() {\n    // console.log(this.props.currentUser)\n    return (\n      <div className=\"project-container\">\n        <div>\n          <h2>All Projects</h2>\n        </div>\n        <Project\n          currentProject={this.props.currentProject}\n          projects={this.state.projectList}\n          loadCurrentProject={this.props.loadCurrentProject}\n          renderProjectForm={this.renderProjectForm}\n          createNewProject={this.createNewProject}\n        />\n      </div>\n    );\n  }\n}\n\nexport default ProjectContainer;","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nclass Login extends Component {\n  state = {\n    username: \"\",\n    password: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    let { username, password } = this.state;\n    this.props.logInUser(username, password);\n  };\n\n  render() {\n    return (\n      <div className='login-component'>\n        <div id='login-header'>\n          <h2>Login</h2>\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type='text'\n            name='username'\n            placeholder='Username'\n            onChange={this.handleChange}\n            value={this.state.username}\n          />{\" \"}\n          <br />\n          <input\n            type='password'\n            name='password'\n            placeholder='Password'\n            onChange={this.handleChange}\n            value={this.state.password}\n          />{\" \"}\n          <br />\n          <input type='submit' />\n        </form>\n        <p>\n          <Link to={\"/signup\"}>Create an Account</Link>\n        </p>\n        {/* <img\n          id='puglove'\n          src='https://media0.giphy.com/media/onsxwAbM8xUNa/source.gif'\n          alt='doggie'\n        /> */}\n      </div>\n    );\n  }\n}\n\nexport default Login;","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\n\nclass Signup extends Component {\n  state = {\n    name: '',\n    username: \"\",\n    email: \"\",\n    password: \"\"\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault()\n    let { name, username, email, password } = this.state\n    this.props.registerUser(name, username, email, password)\n  }\n\n  render() {\n    return (\n      <div className='login-component'>\n        <div id='login-header'>\n          <h2>Signup</h2>\n        </div>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type='text'\n            name='name'\n            placeholder='Name'\n            onChange={this.handleChange}\n            value={this.state.name}\n          />{\" \"}\n          <br />\n          <input\n            type='text'\n            name='email'\n            placeholder='Email'\n            onChange={this.handleChange}\n            value={this.state.email}\n          /> <br></br>\n          <input\n            type='text'\n            name='username'\n            placeholder='Username'\n            onChange={this.handleChange}\n            value={this.state.username}\n          />{\" \"}\n          <br />\n          <input\n            type='password'\n            name='password'\n            placeholder='Password'\n            onChange={this.handleChange}\n            value={this.state.password}\n          />{\" \"}\n          <br />\n          <input type='submit' />\n        </form>\n        <p><Link to={'/login'}>Back to Login</Link></p>\n        {/* <marquee behavior=\"scroll\" direction=\"right\"><img id=\"doggie-running\" src=\"https://media.giphy.com/media/6CB3hti3o9QGODWTWO/giphy.gif\" alt=\"doggie\"/></marquee> */}\n      </div>\n    );\n  }\n}\n\nexport default Signup;","import React, { Component } from \"react\";\n\nclass Card extends Component {\n  state = {\n    hover: false\n  };\n\n  handleMouseOver = () => {\n    this.setState({\n      hover: true\n    });\n  };\n\n  handleMouseOut = () => {\n    this.setState({\n      hover: false\n    });\n  };\n\n  handleClick = () => {\n    console.log(this.props);\n    fetch(`https://chello-api.herokuapp.com/tasks/${this.props.taskId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Accept': \"application/json\",\n        'Authorization': localStorage.token\n      }\n    })\n\n    this.props.deleteCard(this.props.taskId);\n    \n  };\n\n  render() {\n    return (\n      <div className='card-component'>\n        <div\n          onMouseEnter={this.handleMouseOver}\n          onMouseLeave={this.handleMouseOut}\n          className='to-do-card'\n        >\n          <h2>{this.props.task}</h2>\n          {this.state.hover ? <h3 onClick={this.handleClick}>x</h3> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;","import React, { Component } from \"react\";\nimport Card from \"../components/Card\";\n\nclass ListCardContainer extends Component {\n  state = {\n    taskCards: this.props.listCards.tasks,\n    clicked: false,\n    inputValue: \"\"\n  };\n  \n\n  handleClick = () => {\n    this.setState({\n      clicked: !this.state.clicked\n    });\n  };\n\n  handleChange = e => {\n    this.setState({\n      inputValue: e.target.value\n    });\n  };\n\n  deleteCard = taskID => {\n    let newTaskCardsArr = this.state.taskCards.filter(taskObj => taskObj.id != taskID)\n    this.setState({\n      taskCards: newTaskCardsArr\n    })\n  }\n\n  handleSubmit = e => {\n    e.preventDefault();\n    fetch(`https://chello-api.herokuapp.com/tasks`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify({\n        list_id: this.props.listCards.id,\n        content: this.state.inputValue\n      })\n    })\n      .then(resp => resp.json())\n      .then(respData => {\n        let id = respData.data.id\n        let { content, list_id } = respData.data.attributes\n        let newTaskCardObj = {\n          id,\n          content,\n          list_id\n        }\n        this.setState({\n          taskCards: [...this.state.taskCards, newTaskCardObj],\n          clicked: false,\n          inputValue: ''\n        })\n      });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className='list-card-container'>\n          <h2>{this.props.listCards.name}</h2>\n          {this.state.taskCards.map(task => (\n            <Card key={task.id} task={task.content} taskId={task.id} deleteCard={this.deleteCard} />\n          ))}\n          {!this.state.clicked ? (\n            <div className='add-card-button'>\n              <button onClick={this.handleClick} className='add-card-btn'>Add a card</button>\n            </div>\n          ) : (\n            <form onSubmit={this.handleSubmit} className='list-card-form'>\n              <textarea\n                onChange={this.handleChange}\n                value={this.state.inputValue}\n                type='text'\n                placeholder='Enter a title for this card... '\n              ></textarea>\n              <div className='list-card-form-wrapper'>\n                <input type='submit' />\n                <h2 onClick={this.handleClick}>x</h2>\n              </div>\n            </form>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ListCardContainer;","import React, { Component } from \"react\";\nimport ListCardContainer from \"./ListCardContainer\";\n\nclass ListCards extends Component {\n  state = {\n    cards: []\n  };\n\n  render() {\n    const renderListCards = this.props.listCards.map(card => {\n      return (\n        <ListCardContainer\n          listCards={this.props.listCards}\n          listCards={card}\n          loadCurrentProject={this.props.loadCurrentProject}\n        />\n      );\n    });\n    return <React.Fragment>{renderListCards}</React.Fragment>;\n  }\n}\n\nexport default ListCards;","import React, { Component } from 'react'\nimport ListCards from './ListCards'\n\nclass ListContainer extends Component {\n\n\n  state = {\n    listCards: this.props.currentProject.lists,\n    inputValue: '',\n    clicked: false\n  }\n\n  // this.props.currentProject.lists.map\n\n  // handleClick = () => {\n  //   this.setState({\n  //     listCards: [ {name: 'New Taskslakjshdflkajshdflkjahsdflkjhasdflkjhasdflkjhasdflkjhasdflkhjasd'}, ...this.state.listCards ]\n  //   })\n  // }\n\n  handleClick = () => {\n    this.setState({\n      clicked: !this.state.clicked\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      inputValue: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    let project_id = document.URL.split('projects/')[1]\n    console.log(this.props)\n    fetch(`https://chello-api.herokuapp.com/lists`, {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: localStorage.token\n      },\n      body: JSON.stringify({\n        project_id,\n        name: this.state.inputValue,\n      })\n    })\n    .then(resp => resp.json())\n    .then(respData => {\n      // debugger;\n      // Use destructuring to reform the data\n      let id = respData.data.id\n      let { name, project_id, tasks } = respData.data.attributes\n      let newListCardObj = { \n        id,\n        name,\n        tasks\n      }\n      this.setState({\n        listCards: [...this.state.listCards, newListCardObj],\n        clicked: false,\n        inputValue: ''\n      })\n    })\n\n    // this.setState({\n    //   listCards: [{name: this.state.inputValue}, ...this.state.listCards]\n    // })\n  }\n\n\n  render() {\n    // debugger;\n    return (\n      <div className=\"list-container\">\n        <ListCards listCards={this.state.listCards} loadCurrentProject={this.props.loadCurrentProject}/>\n        { !this.state.clicked ?\n        <div onClick={this.handleClick} className='list-card-container list-container-add-list-btn'>\n          <h3>Add a List</h3>\n        </div>\n        :\n        <form onSubmit={this.handleSubmit} className='list-container-form'>\n          <input type=\"text\" onChange={this.handleChange} value={this.state.inputValue} placeholder=\"Enter a List title...\"/>\n          <div className='list-container-form-submit-wrapper'>\n            <input type=\"submit\"/>\n            <h2 onClick={this.handleClick}>x</h2>\n          </div>\n        </form>\n        }\n      </div>\n    )\n  }\n}\n\nexport default ListContainer","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport About from \"./components/About\";\nimport Header from \"./components/Header\";\nimport Sidebar from \"./containers/Sidebar\";\nimport ProjectContainer from \"./containers/ProjectContainer\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport ListContainer from \"./containers/ListContainer\";\n\nclass App extends Component {\n  state = {\n    login: false,\n    currentUser: {},\n    projectList: [],\n    currentProject: {},\n    currentProjectLoaded: false,\n    projectsLoaded: false\n  };\n\n  componentDidMount() {\n    // Check local storage for a token\n    this.checkForToken();\n    this.checkForProjectId();\n  }\n\n  checkForToken = () => {\n    localStorage.token\n      ? this.getUserFromToken()\n      : console.log(\"You're not logged in, buddy!!\");\n  };\n\n  checkForProjectId = () => {\n    if (localStorage.projectId && document.URL.includes(\"/projects\")) {\n      this.loadCurrentProject(localStorage.projectId)\n    }\n  }\n\n  logInUserByToken = () => {\n    fetch(\"https://chello-api.herokuapp.com/persist\", {\n      methodL: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: localStorage.token,\n        Accept: \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(userInfo => {\n        this.setState(\n          {\n            login: true,\n            currentUser: userInfo\n          },\n          () => {\n            // Set the user's projects to true\n            this.fetchprojectList();\n          }\n        );\n      });\n  };\n\n  logOutUser = () => {\n    localStorage.clear()\n    this.setState({\n      login: false,\n      currentUser: {}\n    })\n  }\n\n  // Get user from token\n  getUserFromToken = () => {\n    fetch(\"https://chello-api.herokuapp.com/persist\", {\n      method: \"GET\",\n      headers: {\n        'Authorization': localStorage.token,\n        \"Content-Type\": \"application/json\",\n        'Accept': \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(userInfo => {\n        this.setState(\n          {\n            login: true,\n            currentUser: userInfo\n          },\n          () => {\n            console.log(this.state.currentUser);\n            if (this.state.login) {\n              this.logInUserByToken();\n            }\n          }\n        );\n      });\n  };\n\n  logInUser = (username, password) => {\n    fetch(\"https://chello-api.herokuapp.com/tokens\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      },\n      body: JSON.stringify({ username, password })\n    })\n      .then(res => res.json())\n      .then(userInfo => {\n        if (userInfo.errors) return alert(userInfo.errors.reduce((message, string) => message += `${string}. \\n`, ''))\n        this.setState(\n          {\n            login: true,\n            currentUser: userInfo\n          },\n          () => {\n            // store token in local storage\n            localStorage.setItem(\"token\", userInfo.token);\n            // Set the user's projects to true\n            this.fetchprojectList();\n          }\n        );\n      });\n  };\n\n  fetchprojectList = () => {\n    // debugger\n    // if (!this.props.userLoggedIn) return;\n    fetch(`https://chello-api.herokuapp.com/users/${this.state.currentUser.user_id}`, {\n      headers: {\n        Authorization: localStorage.token\n      }\n    })\n      .then(resp => resp.json())\n      .then(respData => {\n        // console.log(data)\n        // debugger;\n        this.setState({\n          projectList: respData.data.attributes.projects,\n          projectsLoaded: true\n        });\n      });\n  };\n\n  loadCurrentProject = projectId => {\n    fetch(`https://chello-api.herokuapp.com/projects/${projectId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: localStorage.token\n      }\n    })\n      .then(res => res.json())\n      .then(fetchData => {\n        let { attributes } = fetchData.data;\n        this.setState({\n          currentProject: {...attributes},\n          currentProjectLoaded: true\n        });\n      })\n      .then(localStorage.setItem(\"projectId\", projectId))\n  };\n\n  resetCurrentProject = () => {\n    this.setState({\n      currentProject: {},\n      currentProjectLoaded: false\n    })\n  }\n\n  registerUser = (name, username, email, password) => {\n    fetch('https://chello-api.herokuapp.com/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({ name, username, email, password })\n    })\n      .then(res => res.json())\n      .then(userInfo => {\n        // debugger;\n        if (userInfo.errors) return alert(userInfo.error.reduce((message, string) => message += `${string}. \\n`, ''))\n        this.setState(\n          {\n            login: true,\n            currentUser: userInfo\n          },\n          () => {\n            // store token in local storage\n            localStorage.setItem('token', userInfo.token);\n            // Set the user's projects to true\n            this.fetchprojectList();\n          }\n        );\n      });\n  };\n\n  render() {\n    return this.state.login ? (\n      <Router>\n        <Header login={this.state.login} currentUser={this.state.currentUser} resetCurrentProject={this.resetCurrentProject} logOutUser={this.logOutUser} />\n        <Switch>\n          <Route exact path='/about' component={About} />\n          <Route\n            exact\n            path='/projects/:id'\n            render={renderProps => {\n              let foundProjectArr = document.URL.split(\"/\");\n              let currentProjectID = foundProjectArr[foundProjectArr.length - 1];\n              if(this.state.currentProjectLoaded) return (\n                <ListContainer\n                  {...renderProps}\n                  currentProject={this.state.currentProject}\n                  loadCurrentProject={this.loadCurrentProject}\n                  currentProjectId={currentProjectID}\n                />\n                )\n                \n                return (\n                  <h1>Please wait while we load your project...</h1>\n                )\n            }}\n          />\n          <Route\n            // exact\n            path='/'\n            render={routerProps => (\n              <div className='home-container'>\n                <Sidebar />\n                {this.state.projectsLoaded ? (\n                  <ProjectContainer\n                    {...routerProps}\n                    currentUser={this.state.currentUser}\n                    userLoggedIn={this.state.login}\n                    loadCurrentProject={this.loadCurrentProject}\n                    projectList={this.state.projectList}\n                  />\n                ) : (\n                  <div>\n                    <h2>Please wait while we get your projects together...</h2>\n                  </div>\n                )}\n              </div>\n            )}\n          />\n        </Switch>\n      </Router>\n    ) : (\n      <Router>\n        <Header login={this.state.login} />\n        <Switch>\n          <Route\n            exact\n            path=\"/login\"\n            render={routerProps => (\n              <Login {...routerProps} logInUser={this.logInUser} />\n            )}\n          />\n          <Route\n            exact\n            path=\"/signup\"\n            render={routerProps => (\n              <Signup {...routerProps} registerUser={this.registerUser} />\n            )}\n          />\n          <Route\n            path=\"/*\"\n            render={routerProps => (\n              <Login {...routerProps} logInUser={this.logInUser} />\n            )}\n          />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}